<Window x:Class="SharpMonoInjector.Gui.Views.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
        xmlns:vm="clr-namespace:SharpMonoInjector.Gui.ViewModels"
        xmlns:cv="clr-namespace:SharpMonoInjector.Gui.Converters"
        
        Title="SharpMonoInjector 2.4 wh0am1 Mod" 
        Height="360" Width="600" 
        Style="{DynamicResource Main}" WindowStyle="None" 
        ResizeMode="CanMinimize" 
        Background="#FF2C2C2C" Foreground="#FF3BB667">

    <Window.Resources>
        <cv:MonoProcessToStringConverter x:Key="MonoProcessToStringConverter"/>
        <cv:InjectedAssemblyToStringConverter x:Key="InjectedAssemblyToStringConverter"/>

        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FFCFCFCF"/>
        <SolidColorBrush x:Key="Button.Static.Foreground" Color="#FF4D6999"/>
        
        <ControlTemplate x:Key="ButtonTemplate" TargetType="{x:Type Button}">
            <Border x:Name="Border" CornerRadius="0" BorderThickness="0" Background="Transparent">
                <ContentPresenter Margin="2" HorizontalAlignment="Center" VerticalAlignment="Center" RecognizesAccessKey="True"/>
            </Border>
            <ControlTemplate.Triggers>
                <Trigger Property="IsKeyboardFocused" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                </Trigger>
                <Trigger Property="IsDefaulted" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                </Trigger>
                <Trigger Property="IsMouseOver" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                </Trigger>
                <Trigger Property="IsPressed" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="true">
                    <Setter TargetName="Border" Property="Background" Value="Transparent" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="DarkButton" TargetType="{x:Type Button}">
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="BorderThickness" Value="0.0"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="#FFFFFF"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Static.Foreground}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="Main" TargetType="{x:Type Window}">
            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Window}">
                        <Grid>
                            <Border BorderThickness="1" CornerRadius="0">
                                <Border.Background>
                                    <ImageBrush Stretch="UniformToFill" Opacity="1" ImageSource="/smi_gui;component/Resources/Backgrounds/background-hatched.png"/>
                                </Border.Background>
                                <DockPanel LastChildFill="True">
                                    <Border Margin="0,0,0,2" Height="30" DockPanel.Dock="Top" Background="Black" Opacity="1" MouseLeftButtonDown="Window_MouseLeftButtonDown">
                                        <DockPanel LastChildFill="False">
                                            <Image Margin="5,5,0,4" Stretch="Uniform" Source="/smi_gui;component/Resources/icon.ico" />
                                            <TextBlock Margin="8,5,0,4" VerticalAlignment="Center" FontWeight="DemiBold" FontStretch="UltraExpanded" Foreground="#FF6D91CF" Text="{TemplateBinding Title}" FontSize="12" FontFamily="Resources/Fonts/Orbitron Light.otf#Orbitron" />
                                            <Button DockPanel.Dock="Right" Click="Window_Exit" Template="{StaticResource ButtonTemplate}" Background="Transparent" BorderBrush="Transparent" VerticalAlignment="Center" Margin="0,0,5,0">
                                                <Image Stretch="None" Source="/smi_gui;component/Resources/Window/Close.png" />
                                            </Button>
                                            <Button Click="Window_Minimize" Template="{StaticResource ButtonTemplate}" Background="Transparent" BorderBrush="Transparent" VerticalAlignment="Bottom" Margin="0,0,5,3" DockPanel.Dock="Right">
                                                <Image Stretch="None" Source="/smi_gui;component/Resources/Window/Minimize.png" />
                                            </Button>
                                        </DockPanel>
                                    </Border>

                                    <AdornerDecorator DockPanel.Dock="Bottom">
                                        <ContentPresenter Grid.Row="1" />
                                    </AdornerDecorator>
                                </DockPanel>
                            </Border>
                        </Grid>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="ComboBox.Static.Background" Color="#2A2A2C"/>
        <SolidColorBrush x:Key="ComboBox.Static.Border" Color="#FF2D2D30"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Glyph" Color="White"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Background" Color="#2A2A2C"/>
        <SolidColorBrush x:Key="ComboBox.MouseOver.Border" Color="#FF2D2D30"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Glyph" Color="#FF000000"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Background" Color="#2A2A2C"/>
        <SolidColorBrush x:Key="ComboBox.Pressed.Border" Color="#FF2D2D30"/>
        <SolidColorBrush x:Key="ComboBox.Static.Glyph" Color="#FF606060"/>

        <Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
            <Setter Property="OverridesDefaultStyle" Value="true"/>
            <Setter Property="IsTabStop" Value="false"/>
            <Setter Property="Focusable" Value="false"/>
            <Setter Property="ClickMode" Value="Press"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type ToggleButton}">
                        <Border x:Name="templateRoot" SnapsToDevicePixels="true" Background="{StaticResource ComboBox.Static.Background}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{StaticResource ComboBox.Static.Border}">
                            <Border Width="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" SnapsToDevicePixels="true" Margin="0" HorizontalAlignment="Right" BorderThickness="1">
                                <Path x:Name="arrow" VerticalAlignment="Center" Margin="0" HorizontalAlignment="Center" Fill="{StaticResource ComboBox.Static.Glyph}" Data="F1 M 0,0 L 2.667,2.66665 L 5.3334,0 L 5.3334,-1.78168 L 2.6667,0.88501 L0,-1.78168 L0,0 Z"/>
                            </Border>
                        </Border>
                        <ControlTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                            </MultiDataTrigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.MouseOver.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.MouseOver.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                            </MultiDataTrigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Fill" TargetName="arrow" Value="{StaticResource ComboBox.Pressed.Glyph}"/>
                            </Trigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                                <Setter Property="Background" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="templateRoot" Value="{StaticResource ComboBox.Pressed.Border}"/>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
                                </MultiDataTrigger.Conditions>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
                                    <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
                                </MultiDataTrigger.Conditions>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        
        <ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="true">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{StaticResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{StaticResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
                    <Themes:SystemDropShadowChrome x:Name="shadow" Color="Transparent" MaxHeight="{TemplateBinding MaxDropDownHeight}" MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <Border x:Name="dropDownBorder" BorderBrush="{StaticResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{StaticResource {x:Static SystemColors.WindowBrushKey}}">
                            <ScrollViewer x:Name="DropDownScrollViewer">
                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                    <Canvas HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
                                        <Rectangle x:Name="opaqueRect" Fill="#2A2A2C" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
                                    </Canvas>
                                    <ItemsPresenter KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                </Grid>
                            </ScrollViewer>
                        </Border>
                    </Themes:SystemDropShadowChrome>
                </Popup>
                <ToggleButton BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
                <ContentPresenter ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="HasDropShadow" SourceName="PART_Popup" Value="true">
                    <Setter Property="Margin" TargetName="shadow" Value="0,0,5,5"/>
                    <Setter Property="Color" TargetName="shadow" Value="#71000000"/>
                </Trigger>
                <Trigger Property="HasItems" Value="false">
                    <Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="true"/>
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
                    <Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="ComboBoxStyle1" TargetType="{x:Type ComboBox}">
            <Setter Property="BorderBrush" Value="{StaticResource ComboBox.Static.Border}"/>
            <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.WindowTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
            <Setter Property="Padding" Value="6,3,5,3"/>
            <Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
            <Setter Property="ScrollViewer.PanningMode" Value="Both"/>
            <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
            <Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
            <Style.Triggers>
                <Trigger Property="IsEditable" Value="true">
                    <Setter Property="IsTabStop" Value="false"/>
                    <Setter Property="Padding" Value="2"/>
                </Trigger>
            </Style.Triggers>
        </Style>
    </Window.Resources>

    <Window.DataContext>
        <vm:MainWindowViewModel/>
    </Window.DataContext>

    <Grid>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <ColumnDefinition Width="5"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>
        <Grid.RowDefinitions>
            <RowDefinition Height="*"/>
            <RowDefinition Height="5"/>
            <RowDefinition Height="auto"/>
        </Grid.RowDefinitions>
        <GroupBox Grid.Column="0" Grid.Row="0" Header="Inject" Margin="5,5,5,0" BorderThickness="0" BorderBrush="#FF39B561">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="5"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                <Label Grid.Column="0" Grid.Row="0" Margin="-5,0,0,0" Content="Process" HorizontalAlignment="Left" Foreground="#FF6A9E7D"/>
                <Button Grid.Column="2" Grid.Row="0" Content="Refresh" Style="{StaticResource DarkButton}" Foreground="#FF289746" BorderBrush="#FF272727" Height="20" HorizontalAlignment="Right" Command="{Binding Path=RefreshCommand, IsAsync=True}"/>
                <ComboBox Grid.Column="0" Grid.Row="1" Style="{StaticResource ComboBoxStyle1}" ItemsSource="{Binding Path=Processes}" SelectedItem="{Binding Path=SelectedProcess}" IsSynchronizedWithCurrentItem="True" Background="#FF4F4E4E" Foreground="#FF39B561">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Converter={StaticResource MonoProcessToStringConverter}}"/>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
                <Label Grid.Column="0" Grid.Row="2" Margin="-5,0,0,0" Content="Assembly to inject" Foreground="#FF6A9E7D"/>
                <Grid Grid.Column="0" Grid.Row="3">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="5"/>
                        <ColumnDefinition Width="auto"/>
                    </Grid.ColumnDefinitions>
                    <TextBox Grid.Column="0" Grid.Row="0" Text="{Binding Path=AssemblyPath, UpdateSourceTrigger=PropertyChanged}" BorderBrush="#FF272727" Background="#2A2A2C" Foreground="#FF39B561"/>
                    <Button Grid.Column="2" Grid.Row="0" Width="25" Content="..." Style="{StaticResource DarkButton}" Foreground="#FF289746" BorderBrush="#FF272727" Command="{Binding Path=BrowseCommand}"/>
                </Grid>
                <Label Grid.Column="0" Grid.Row="4" Margin="-5,0,0,0" Content="Namespace" Foreground="#FF6A9E7D"/>
                <TextBox Grid.Column="0" Grid.Row="5" Text="{Binding Path=InjectNamespace, UpdateSourceTrigger=PropertyChanged}" BorderBrush="#FF272727" Background="#2A2A2C" Foreground="#FF39B561"/>
                <Label Grid.Column="0" Grid.Row="6" Margin="-5,0,0,0" Content="Class name" Foreground="#FF6A9E7D"/>
                <TextBox Grid.Column="0" Grid.Row="7" Text="{Binding Path=InjectClassName, UpdateSourceTrigger=PropertyChanged}" BorderBrush="#FF272727" Background="#2A2A2C" Foreground="#FF39B561"/>
                <Label Grid.Column="0" Grid.Row="8" Margin="-5,0,0,0" Content="Method name" Foreground="#FF6A9E7D"/>
                <TextBox Grid.Column="0" Grid.Row="9" Text="{Binding Path=InjectMethodName, UpdateSourceTrigger=PropertyChanged}" BorderBrush="#FF272727" Background="#2A2A2C" Foreground="#FF39B561"/>
                <Button Grid.Column="0" Grid.Row="11" Content="Inject" Style="{StaticResource DarkButton}" Foreground="#FF289746" BorderBrush="#FF272727" HorizontalAlignment="Right" Command="{Binding Path=InjectCommand}" FontSize="16"/>
            </Grid>
        </GroupBox>
        <GroupBox Grid.Column="2" Grid.Row="0" Header="Eject" Margin="0,5,5,0" BorderBrush="#FF39B561" BorderThickness="0">
            <Grid>
                <Grid.RowDefinitions>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="5"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="auto"/>
                    <RowDefinition Height="5"/>
                    <RowDefinition Height="auto"/>
                </Grid.RowDefinitions>
                <Label Grid.Column="0" Grid.Row="0" Margin="-5,0,0,0" Content="Injected assemblies" Foreground="#FF6A9E7D"/>
                <ListBox Grid.Column="0" Grid.Row="1" MinHeight="63" ItemsSource="{Binding Path=InjectedAssemblies}" SelectedItem="{Binding Path=SelectedAssembly}" BorderBrush="#FF272727" Background="#2A2A2C" Foreground="#FF39B561">
                    <ListBox.ItemTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Converter={StaticResource InjectedAssemblyToStringConverter}}"/>
                        </DataTemplate>
                    </ListBox.ItemTemplate>
                </ListBox>
                <Label Grid.Column="0" Grid.Row="3" Margin="-5,0,0,0" Content="Namespace" Foreground="#FF6A9E7D"/>
                <TextBox Grid.Column="0" Grid.Row="4" Text="{Binding Path=EjectNamespace}" BorderBrush="#FF272727" Background="#2A2A2C" Foreground="#FF39B561"/>
                <Label Grid.Column="0" Grid.Row="5" Margin="-5,0,0,0" Content="Class name" Foreground="#FF6A9E7D"/>
                <TextBox Grid.Column="0" Grid.Row="6" Text="{Binding Path=EjectClassName}" BorderBrush="#FF272727" Background="#2A2A2C" Foreground="#FF39B561"/>
                <Label Grid.Column="0" Grid.Row="7" Margin="-5,0,0,0" Content="Method name" Foreground="#FF6A9E7D"/>
                <TextBox Grid.Column="0" Grid.Row="8" Text="{Binding Path=EjectMethodName}" BorderBrush="#FF272727" Background="#2A2A2C" Foreground="#FF39B561"/>
                <Button Grid.Column="0" Grid.Row="10" Content="Eject" Style="{StaticResource DarkButton}" Foreground="#FF289746" BorderBrush="#FF272727" HorizontalAlignment="Right" Command="{Binding Path=EjectCommand}" FontSize="16" />
            </Grid>
        </GroupBox>
        <StatusBar Grid.Column="0" Grid.Row="2" Grid.ColumnSpan="3" Background="#FF2A2A2C">
            <StatusBar.Items>
                <StatusBarItem Foreground="#FF21AC40" BorderBrush="#FF272727" Background="#2A2A2C">
                    <TextBlock Text="Status:"/>
                </StatusBarItem>
                <StatusBarItem BorderBrush="#FF272727" Background="#2A2A2C" Foreground="#FF1FA03C">
                    <StatusBarItem.Style>
                        <Style TargetType="StatusBarItem">
                            <Setter Property="Width" Value="452"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Path=AVAlert}" Value="False">
                                    <Setter Property="Width" Value="555"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StatusBarItem.Style>
                    <TextBlock Text="{Binding Path=Status}">
                        <TextBlock.ContextMenu>
                            <ContextMenu>
                                <MenuItem Header="Copy" Command="{Binding Path=CopyStatusCommand}"/>
                            </ContextMenu>
                        </TextBlock.ContextMenu>
                    </TextBlock>
                </StatusBarItem>
                <StatusBarItem Foreground="{Binding Path=AVColor}" BorderBrush="#FF272727" Background="#2A2A2C" HorizontalAlignment="Left">
                    <TextBlock Text="Antivirus detected!">
                        <TextBlock.Style>
                            <Style TargetType="TextBlock">
                                <Setter Property="Visibility" Value="Collapsed" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Path=AVAlert}" Value="True">
                                        <Setter Property="Visibility" Value="Visible" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </TextBlock.Style>
                    </TextBlock>
                </StatusBarItem>
            </StatusBar.Items>
        </StatusBar>
    </Grid>
</Window>